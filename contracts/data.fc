#include "imports/stdlib.fc";
;; storage variables

global slice jetton_address;
;; who deployed the contract and sent the tokens
global slice jettons_giver;
;; who would receive the jettons after success transaction
global slice jettons_receiver;
;; amount of jettons to be transferred
global int amount;
;; expiration time of the contract
global int expiration_time;
;; hash H, when x present, s.t. SHA256(x) = H, where x is the secret the funds are unlocked to the receiver
global int hash;


;; load_data populates storage variables using stored data
() load_data() impure inline_ref {
    var ds = get_data().begin_parse();
    {
        var ref = ds~load_ref();
        slice cs = ref.begin_parse();
        jetton_address = cs~load_msg_addr();
        jettons_giver = cs~load_msg_addr();
        jettons_receiver = cs~load_msg_addr();
        cs.end_parse();
    }
    amount = ds~load_coins();
    expiration_time = ds~load_uint(40);
    hash = ds~load_uint(256);
    ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure inline {
    set_data(
        begin_cell()
            .store_ref(
                begin_cell()
                    .store_slice(jetton_address)
                    .store_slice(jettons_giver)
                    .store_slice(jettons_receiver)
                    .end_cell()
            )
            .store_coins(amount)
            .store_uint(expiration_time, 40)
            .store_uint(hash, 256)
            .end_cell()
    );
}
